{"version":3,"sources":["CounterModifier/CounterModifier.module.css","Counter/Counter.module.css","Counter/Counter.tsx","CounterModifier/CounterModifier.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Counter","props","useState","min","count","setCount","setIsLimit","className","s","counter","counterDisplay","maxValueStyle","max","active","maxValue","counterButtons","onClick","disabled","CounterModifier","setError","inputStyle","color","error","modifier","label","style","type","value","onChange","e","setMax","Number","currentTarget","minValue","setMin","setValue","setButton","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,SAAW,kCAAkC,SAAW,kCAAkC,SAAW,kCAAkC,MAAQ,iC,gBCAjKD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,gCAAgC,OAAS,0B,0LCOxG,SAASC,EAAQC,GAAqB,IAAD,EAChBC,mBAASD,EAAME,KADC,mBACnCC,EADmC,KAC5BC,EAD4B,OAEZH,oBAAS,GAFG,mBAE1BI,GAF0B,WAuBxC,OACI,yBAAKC,UAAWC,IAAEC,SACd,yBAAKF,UAAWC,IAAEE,eAAiB,IAT1B,WACb,IAAIC,EAAgB,GAIpB,OAHIP,IAAUH,EAAMW,MAChBD,EAAgBH,IAAEK,QAEfF,EAIsCG,IACpCV,GAEL,yBAAKG,UAAWC,IAAEO,gBACd,4BAAQC,QAAS,kBAAMX,EAASD,EAAQ,IAChCa,SAAUb,IAAUH,EAAMW,KADlC,YAIA,4BAAQI,QAtBpB,WACIX,EAASJ,EAAME,KACfG,GAAW,IAoBqBW,SAAoB,IAAVb,GAAlC,W,oBC7BT,SAASc,EAAgBjB,GAAsB,IAAD,EAExBC,oBAAS,GAFe,6BAI9CD,EAAME,KAAOF,EAAMW,KAAOX,EAAME,IAAM,EACrCF,EAAMkB,UAAS,GAEflB,EAAMkB,UAAS,GAGnB,IAAIC,EAAY,CACZC,MAAOpB,EAAMqB,MAAQ,MAAQ,SAIjC,OACI,yBAAKf,UAAWC,IAAEe,UACd,yBAAKhB,UAAWC,IAAEM,UACd,yBAAKP,UAAWC,IAAEgB,OAAlB,cACA,2BAAOC,MAAOL,EAAYM,KAAK,SAASC,MAAO1B,EAAMW,IAAKgB,SAAU,SAACC,GAAO5B,EAAM6B,OAAOC,OAAOF,EAAEG,cAAcL,YAEpH,yBAAKpB,UAAWC,IAAEyB,UACd,yBAAK1B,UAAWC,IAAEgB,OAAlB,cACA,2BAAOC,MAAOL,EAAYM,KAAK,SAASC,MAAO1B,EAAME,IAAKyB,SAAU,SAACC,GAAM5B,EAAMiC,OAAOH,OAAOF,EAAEG,cAAcL,YAEnH,yBAAKpB,UAAWC,IAAE2B,UACd,4BAAQ5B,UAAWC,IAAE4B,WAArB,SCpBDC,MAbf,WAAgB,IAAD,EACSnC,mBAAiB,GAD1B,mBACNC,EADM,KACD+B,EADC,OAEShC,mBAAiB,GAF1B,mBAENU,EAFM,KAEDkB,EAFC,OAGa5B,oBAAkB,GAH/B,mBAGNoB,EAHM,KAGCH,EAHD,KAKX,OACI,yBAAKZ,UAAU,OACX,kBAACW,EAAD,CAAiBf,IAAKA,EAAKS,IAAKA,EAAKsB,OAAQA,EAAQJ,OAAQA,EAAQX,SAAUA,EAAUG,MAAOA,IAChG,kBAACtB,EAAD,CAASG,IAAKA,EAAKS,IAAKA,MCDhB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLiC,QAAQjC,MAAMA,EAAMkC,c","file":"static/js/main.667069ab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modifier\":\"CounterModifier_modifier__xQH31\",\"maxValue\":\"CounterModifier_maxValue__2Yk52\",\"minValue\":\"CounterModifier_minValue__EiFR6\",\"label\":\"CounterModifier_label__2MCOG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2ME6f\",\"counterDisplay\":\"Counter_counterDisplay__1RVP-\",\"active\":\"Counter_active__2bOLz\"};","import React, {useState} from \"react\";\r\nimport s from './Counter.module.css';\r\n\r\ntype CounterType = {\r\n    min: number\r\n    max: number\r\n}\r\n\r\nexport function Counter(props: CounterType) {\r\n    let [count, setCount] = useState(props.min);\r\n    let [isLimit, setIsLimit] = useState(false);\r\n\r\n    function inc() {\r\n        let n = count + 1;\r\n        if (n > props.max) {\r\n            setIsLimit(true);\r\n        }\r\n        setCount(n);\r\n    }\r\n    function reset() {\r\n        setCount(props.min);\r\n        setIsLimit(false);\r\n    }\r\n\r\n    const maxValue = () => {\r\n        let maxValueStyle = '';\r\n        if (count === props.max) {\r\n            maxValueStyle = s.active;\r\n        }\r\n        return maxValueStyle;\r\n    }\r\n    return (\r\n        <div className={s.counter}>\r\n            <div className={s.counterDisplay + ' ' + maxValue()}>\r\n                {count}\r\n            </div>\r\n            <div className={s.counterButtons}>\r\n                <button onClick={() => setCount(count + 1)}\r\n                        disabled={count === props.max}>\r\n                    Push me!\r\n                </button>\r\n                <button onClick={reset} disabled={count === 0}>\r\n                    Reset\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport s from './CounterModifier.module.css';\r\n\r\ntype ModifierType = {\r\n    min: number\r\n    max: number\r\n    setMin: (num: number) => void\r\n    setMax: (num: number) => void\r\n    setError: (b: boolean) => void\r\n    error: boolean\r\n}\r\n\r\nexport function CounterModifier(props: ModifierType) {\r\n\r\n    let [active, setActive] =useState(false);\r\n\r\n    if(props.min >= props.max || props.min < 0) {\r\n        props.setError(true);\r\n    } else{\r\n        props.setError(false);\r\n    }\r\n\r\n    let inputStyle ={\r\n        color: props.error ? 'red' : 'black'\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.modifier}>\r\n            <div className={s.maxValue}>\r\n                <div className={s.label}>max value:</div>\r\n                <input style={inputStyle} type=\"number\" value={props.max} onChange={(e) => {props.setMax(Number(e.currentTarget.value))}}/>\r\n            </div>\r\n            <div className={s.minValue}>\r\n                <div className={s.label}>min value:</div>\r\n                <input style={inputStyle} type=\"number\" value={props.min} onChange={(e) =>{props.setMin(Number(e.currentTarget.value))}}/>\r\n            </div>\r\n            <div className={s.setValue}>\r\n                <button className={s.setButton}>set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Counter} from \"./Counter/Counter\";\r\nimport {CounterModifier} from \"./CounterModifier/CounterModifier\";\r\n\r\nfunction App() {\r\n    let [min, setMin] = useState<number>(0)\r\n    let [max, setMax] = useState<number>(5)\r\n    let [error, setError] = useState<boolean>(false)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <CounterModifier min={min} max={max} setMin={setMin} setMax={setMax} setError={setError} error={error}/>\r\n            <Counter min={min} max={max}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}